<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
  <script src="/javascripts/lookcontrols.js"></script>
  <script src="/javascripts/mixshader.js"></script>
</head>

<body>
  <script>
    AFRAME.registerComponent("a-tour", {
      init: function () {
        let el = this.el;
        let camMasterRig = document.querySelector("#cam-master-rig");

        el.addEventListener("loaded", (e) => {
          //camMasterRig.emit("focus-on", { target: "all", preset: "home" });
          let details = checkNearerHotspot(new THREE.Vector3( 17.258, 0, -3.516 ));
          Teleport(details);
        });
      }
    });

    AFRAME.registerComponent("focus-on", {
      init: function () {
        let el = this.el;
        let dollhouse = document.querySelector("#dollhouse");
        let cam = document.querySelector("a-camera");
        let camOffsetRig = document.querySelector("#cam-offset-rig");

        el.addEventListener("focus-on", (e) => {
          console.log("focus on!", e.detail);

          if (e.detail.target == "all" && e.detail.preset == "home")
            focusOn(dollhouse.object3D);
        });

        function focusOn(obj) {
          let bbox = new THREE.Box3().setFromObject(obj);

          let size = bbox.getSize();

          let max = Math.max(size.x, size.y, size.z);
          let center = bbox.getCenter();

          //console.log(size, center)

          let rotation = { x: -45, y: 33, z: 33 };
          let offset = Math.cbrt(size.x * size.y * size.z) * 2;

          el.setAttribute("position", center.x + " " + center.y + " " + center.z);
          camOffsetRig.setAttribute("animation__focus", "property: rotation; to: " +
            rotation.x + " " + rotation.y + " " + rotation.z + "; dur: 800");

          cam.setAttribute("animation__focus", "property: position; to: 0 0 " + (max * 1) + "; dur: 800");
        }
      }
    });

    function checkNearerHotspot(intersectionPoint) {
      let hotspotGroup = document.querySelectorAll(".hotspot");
      let details = { distance: null, position: null, floor: null, id: null};

      hotspotGroup.forEach((n, i) => {
        let d = n.object3D.position.distanceTo(intersectionPoint);

        if (details.distance == null) {
          details.position = n.object3D.position;
          details.distance = d;
          details.floor = n.getAttribute("floor");
          details.id = n.id;
        }
        if (d < details.distance) {
          details.position = n.object3D.position;
          details.distance = d;
          details.floor = n.getAttribute("floor");
          details.id = n.id;
        }
      });

      //console.log(details);
      return details;
    }

    //Register DollHouse General Status
    AFRAME.registerComponent("status", {
      schema: {
        canteleport: {type: "boolean"},
        reverse: {type: "boolean"},
        firsttransiction: {type: "boolean"},
      }
    });

        //Register DollHouse General Status
    AFRAME.registerComponent("camera-offset", {
      schema: {default: 1.7}
    });

    function Teleport(details, canTeleport, reverse, firstTransition){
      //console.log(details);
      let cam = document.querySelector("a-camera");
      let floor = document.querySelector("#" + details.floor);
      let status = document.querySelector("#dollhouse").getAttribute("status");

      console.log(status);
      
      cam.setAttribute("animation", "property: position; to: " + 
      details.position.x + " " +
        (details.position.y + cam.getAttribute("camera-offset")) + " " +
        details.position.z + "; dur: 1000; startEvents: teleport;");
      
      
      let img = document.querySelector("#img-" + details.id);
      let material = floor.getAttribute("material");

      console.log(status.reverse);
      
      if(status.reverse){
        material.u_map1 = img;
        material.u_map1_origin = {x: details.position.x, y: details.position.y + cam.getAttribute("camera-offset"), z: details.position.z};
        material.u_uv1 = 0;
        console.log(material, img);
        floor.setAttribute("material", material);
        floor.setAttribute("animation", "property: material.u_factor; from: 1.0; to: 0.0; dur: 1000; startEvents: teleport;");
        status.reverse = false;
        document.querySelector("#dollhouse").setAttribute("status", status);
      } else {
        material.u_map2 = img;
        material.u_map2_origin = {x: details.position.x, y: details.position.y + cam.getAttribute("camera-offset"), z: details.position.z};
        material.u_uv2 = 0;
        console.log(material, img);
        floor.setAttribute("material", material);
        floor.setAttribute("animation", "property: material.u_factor; from: 0.0; to: 1.0; dur: 1000; startEvents: teleport;");
        status.reverse = true;
        document.querySelector("#dollhouse").setAttribute("status", status)
      }

      cam.emit("teleport");
      floor.emit("teleport");
    }

    // Adds Click Event Listener to trigger the teleport system
    AFRAME.registerComponent("cursor-listener", {
      init: function () {
        this.el.addEventListener("click", function (e) {
          let details = checkNearerHotspot(e.detail.intersection.point);
          Teleport(details);
        });
      }
    });
  </script>
  <a-scene device-orientation-permission-ui="enabled: false" a-tour>
    <a-assets>
      <% for(n in dollhouse.floors){ %>
        <img id="<%= 'img-dollhouse-' + dollhouse.floors[n].id %>" crossorigin="anonymous"
          src="<%= assetspath + dollhouse.floors[n].image %>">
        <a-asset-item id="<%= 'asset-dollhouse-' + dollhouse.floors[n].id %>"
          src="<%= assetspath + dollhouse.floors[n].mesh %>"></a-asset-item>
        <a-asset-item id="<%= 'asset-navmesh-' + dollhouse.floors[n].id %>"
          src="<%= assetspath + dollhouse.floors[n].navmesh %>"></a-asset-item>
        <% for(i in dollhouse.floors[n].hotspots){ %>
          <img id="<%= 'img-' + dollhouse.floors[n].hotspots[i].id %>" crossorigin="anonymous"
            src="<%= assetspath + dollhouse.floors[n].hotspots[i].image %>">
          <% } %>
            <% } %>
    </a-assets>
    <a-entity id="dollhouse" status="canteleport: true; reverse: false; firstransiction: true;">
      <% for(n in dollhouse.floors){ %>
        <a-entity obj-model="<%= 'obj: #asset-dollhouse-' + dollhouse.floors[n].id %>"
          id="<%= dollhouse.floors[n].id %>"
          material="<%= 'shader: mix-shader; u_map1: #img-dollhouse-' + dollhouse.floors[n].id + '; u_map1_origin: 0 0 0; u_map2: #img-dollhouse-' + dollhouse.floors[n].id + '; u_map2_origin: 0 0 0;' %>">
        </a-entity>
        <a-entity obj-model="<%= 'obj: #asset-navmesh-' + dollhouse.floors[n].id %>"
          id="<%= 'navmesh-' + dollhouse.floors[n].id %>" material="color: grey"
          visible="false"
          position="<%= dollhouse.floors[n].position.x %> <%= dollhouse.floors[n].position.y %> <%= dollhouse.floors[n].position.z %>"
          cursor-listener
          class="clickable">
        </a-entity>
        <% for(i in dollhouse.floors[n].hotspots){ %>
          <a-entity class="hotspot" visible="false" floor="<%= dollhouse.floors[n].id %>" geometry="primitive: plane; width:0.3; height: 0.3;" rotation="-90 0 0"
            material="shader: flat; color: red;" id="<%= dollhouse.floors[n].hotspots[i].id %>"
            position="<%= dollhouse.floors[n].hotspots[i].position.x %> <%= dollhouse.floors[n].hotspots[i].position.y %> <%= dollhouse.floors[n].hotspots[i].position.z %>">
          </a-entity>
          <% } %>
            <% } %>
    </a-entity>

    <a-camera camera-offset="<%= cameraoffset %>" look-controls="enabled: true">
      <a-entity cursor="rayOrigin: mouse" raycaster="objects: .clickable"></a-entity>
    </a-camera>

  </a-scene>
</body>

</html>